import json

def print_hierarchy(module_name, modules, instance_name="", source_line="", depth=0):
    """
    Recursively prints the module hierarchy based on instances in each module,
    including instance names alongside the module names.
    """
    # Print the current module and instance name
    # Check if the module has any instances (cells)
    if module_name in modules:
        module = modules[module_name]
        source_module=module["attributes"]["src"]
        if instance_name:
            print("  " * depth + f"{instance_name}: {module_name} ({source_line}) ({source_module})")
        else:
            print("  " * depth + module_name)

        if "cells" in module:
            # Iterate over each instance (cell) in the module
            for cell_name, cell in module["cells"].items():
                # Recursively print the hierarchy of the instance with its name
                if cell["hide_name"]==0:
                    instance_type = cell["type"]
                    source_line = cell["attributes"]["src"]
                    print_hierarchy(instance_type, modules, cell_name, source_line, depth + 1)

# Load JSON AST generated by Yosys
with open("stereo_match.json", "r") as f:
    data = json.load(f)

# Get all module definitions
modules = data["modules"]

# Replace '<top_module_name>' with your actual top module name
top_module_name = "stereo_match"

# Print the hierarchy starting from the top module
print("Component Dependency Tree:")
print_hierarchy(top_module_name, modules)
